# Configuration File - Nginx Server Configs: http://nginx.org/en/docs/dirindex.html
# Based on: https://github.com/h5bp/server-configs-nginx/blob/master/nginx.conf

# Run as a unique, less privileged user for security reasons.
user coworkit coworkit;

# Sets the worker threads to the number of CPU cores available in the system for best performance.
# Should be > the number of CPU cores.
# Maximum number of connections = worker_processes * worker_connections
worker_processes auto;

# Maximum number of open files per worker process.
# Should be > worker_connections.
worker_rlimit_nofile 8192;

# Include enabled modules
include /etc/nginx/modules-enabled/*.conf;

events {
  # If you need more connections than this, you start optimizing your OS.
  # That's probably the point at which you hire people who are smarter than you as this is *a lot* of requests.
  # Should be < worker_rlimit_nofile.
  worker_connections 8000;

  # A worker process will accept all new connections at a time.
  multi_accept on;
}

# Log errors and warnings to this file
# This is only used when you don't override it on a server{} level
error_log  /var/log/nginx/error.log warn;

# The file storing the process ID of the main process
pid        /var/run/nginx.pid;

http {

  # Hide nginx version information.
  server_tokens off;

  # Specify MIME types for files.
  include       mime.types;
  default_type  application/octet-stream;

  # Update charset_types to match updated mime.types.
  # text/html is always included by charset module.
  charset_types text/css text/plain text/vnd.wap.wml application/javascript application/json application/rss+xml application/xml;

  # Include $http_x_forwarded_for within default format used in log files
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # Log access to this file
  # This is only used when you don't override it on a server{} level
  access_log /var/log/nginx/access.log main;

  # How long to allow each connection to stay idle.
  # Longer values are better for each individual client, particularly for SSL,
  # but means that worker connections are tied up longer.
  keepalive_timeout 75s;

  # Sets the maximum size of the types hash tables.
  types_hash_max_size 2048;

  # Sets the bucket size for the server names hash tables.
  server_names_hash_bucket_size 64;

  # Speed up file transfers by using sendfile() to copy directly
  # between descriptors rather than using read()/write().
  # For performance reasons, on FreeBSD systems w/ ZFS
  # this option should be disabled as ZFS's ARC caches
  # frequently used files in RAM by default.
  sendfile        on;

  # Don't send out partial frames; this increases throughput
  # since TCP frames are filled up before being sent out.
  tcp_nopush      on;
  tcp_nodelay     on;

  # Enable gzip compression.
  gzip on;

  # Compression level (1-9).
  # 5 is a perfect compromise between size and CPU usage, offering about
  # 75% reduction for most ASCII files (almost identical to level 9).
  gzip_comp_level    5;

  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length    256;

  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  gzip_proxied       any;

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary          on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rss+xml
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/bmp
    image/svg+xml
    image/x-icon
    text/cache-manifest
    text/css
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;
  # text/html is always compressed by gzip module

  # This should be turned on if you are going to have pre-compressed copies (.gz) of
  # static files available. If not it should be left off as it will cause extra I/O
  # for the check. It is best if you enable this in a location{} block for
  # a specific directory, or on an individual server{} level.
  # gzip_static on;

  # This tells Nginx to cache open file handles, "not found" errors, metadata about files and their permissions, etc.
  #
  # The upside of this is that Nginx can immediately begin sending data when a popular file is requested,
  # and will also know to immediately send a 404 if a file is missing on disk, and so on.
  #
  # However, it also means that the server won't react immediately to changes on disk, which may be undesirable.
  #
  # In the below configuration, inactive files are released from the cache after 20 seconds, whereas
  # active (recently requested) files are re-validated every 30 seconds.
  #
  # Descriptors will not be cached unless they are used at least 2 times within 20 seconds (the inactive time).
  #
  # A maximum of the 1000 most recently used file descriptors can be cached at any time.
  #
  # Production servers with stable file collections will definitely want to enable the cache.
  open_file_cache          max=1000 inactive=20s;
  open_file_cache_valid    30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors   on;

  # Include files in the sites-enabled folder. server{} configuration files should be
  # placed in the sites-available folder, and then the configuration should be enabled
  # by creating a symlink to it in the sites-enabled folder.
  # See doc/sites-enabled.md for more info.
  include /etc/nginx/sites-enabled/*;

  # Include files in the conf.d folder.
  include /etc/nginx/conf.d/*.conf;
}
